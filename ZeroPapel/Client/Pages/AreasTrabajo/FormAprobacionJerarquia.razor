@page "/formaprobacionjeraquia"
@page "/formaprobacionjeraquia/{AreaTrabajoId:int}/{Id}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js


<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>

    <div class="col-md-5">
        <h5> <b>ÁREA DE TRABAJO:@areaTrabajoNombre </b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}



<EditForm Model="@model" OnValidSubmit="Save">

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatTextField @bind-Value="@model.JerarquiaOrden" Label="Orden Jeraquia" Style="width:100%" Required="true"></MatTextField>
        </div>
    </div>
    <br />


    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <a>Cargo</a>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.CargoId"
                            Multiple="false"
                            Placeholder="[SELECCIONAR]"
                            Data="@listCargos"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
        <div class="col-md-1"></div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatSelect Label="Estado" @bind-Value=@model.Estado Required="true">
                <MatOption Value=true>ACTIVO</MatOption>
                <MatOption Value=false>INACTIVO</MatOption>
            </MatSelect>
        </div>
    </div>
    <br />
    <hr />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <br />
        @if (visibleGuardar)
        {
            <div class="col-md-2">

                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            </div>
        }

    </div>
</EditForm>
<br />

@code {


    [Parameter] public int Id { get; set; }
    [Parameter] public int AreaTrabajoId { get; set; }

    string titulo = "";
    string areaTrabajoNombre = "";
    string msgError = null;
    public AreaTrabajoAprobacionJerarquia model = new AreaTrabajoAprobacionJerarquia();
    Response response = new Response();
    bool visibleGuardar = true;
    public int ordenInicial = 0;
    List<Cargo> listCargos = new List<Cargo>();

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        var qs = navigationManager.ToAbsoluteUri(navigationManager.Uri).Query;
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(qs);

        if (query.TryGetValue("AreaTrabajoId", out var item))
        {
            if (Int32.TryParse(item, out var id))
            {
                this.AreaTrabajoId = id;
            }
        }

        if (query.TryGetValue("Id", out var id_str))
        {
            if (Int32.TryParse(id_str, out var id))
            {
                this.Id = id;
            }
        }


        await LoadData();
    }

    protected async Task Save()
    {
        string accion = "";
        visibleGuardar = false;
        msgError = null;
        model.EmpresaId = singleton.EmpresaId;


        if (model.CargoId <= 0)
        {
            msgError = "Debe seleccionar el cargo.";
        }

        if (model.JerarquiaOrden <= 0)
        {
            msgError = "El orden de la jerarquia debe ser mayor a cero.";
        }

        if (ordenInicial != model.JerarquiaOrden && msgError == null)
        {
            Validacion val = new Validacion();
            val.Mensaje = "ok";
            response = await Http.GetFromJsonAsync<Response>($"api/AreasTrabajoAprobacionJerarquia/AreasTrabajoAprobacionJerarquiaValidarOrden/{singleton.EmpresaId}/{AreaTrabajoId}/{model.JerarquiaOrden}");
            if (response.IsSuccessful)
            {
                val = JsonConvert.DeserializeObject<Validacion>(response.Data.ToString());
            }

            if (val.Mensaje.ToLower() != "ok")
            {
                msgError = val.Mensaje;
            }
        }


        if (msgError == null)
        {

            model.AreaTrabajoId = AreaTrabajoId;
            if (Id > 0)
            {
                accion = "Editar";
                var result = await Http.PostAsJsonAsync<AreaTrabajoAprobacionJerarquia>($"api/AreasTrabajoAprobacionJerarquia/edit", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }
            else
            {
                accion = "Ingresar";
                var result = await Http.PostAsJsonAsync<AreaTrabajoAprobacionJerarquia>($"api/AreasTrabajoAprobacionJerarquia", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }


            if (response.IsSuccessful)
            {
                await RegistrarAuditoria(model, accion);
                navigationManager.NavigateTo("/indexaprobacionjeraquia/" + AreaTrabajoId);
            }
            else
            {
                msgError = response.Message;
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }
        visibleGuardar = true;
    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexaprobacionjeraquia/" + AreaTrabajoId);
    }


    protected async Task LoadData()
    {
        List<AreaTrabajoAprobacionJerarquia> lstDtosAprob = new List<AreaTrabajoAprobacionJerarquia>();
        response = await Http.GetFromJsonAsync<Response>($"api/AreasTrabajoAprobacionJerarquia/{singleton.EmpresaId}/-1/{AreaTrabajoId}");
        if (response.IsSuccessful)
        {
            lstDtosAprob = JsonConvert.DeserializeObject<List<AreaTrabajoAprobacionJerarquia>>(response.Data.ToString());
        }


        model = new AreaTrabajoAprobacionJerarquia();
        if (Id > 0)
        {
            titulo = "EDITAR APROBACIÓN JERAQUIA";
            response = await Http.GetFromJsonAsync<Response>($"api/AreasTrabajoAprobacionJerarquia/{singleton.EmpresaId}/{Id}/{AreaTrabajoId}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<AreaTrabajoAprobacionJerarquia>>(response.Data.ToString()).FirstOrDefault();
                ordenInicial = model.JerarquiaOrden;
            }
        }
        else
        {
            if (lstDtosAprob.Count() > 0)
            {
                model.JerarquiaOrden = lstDtosAprob.Max(x => x.JerarquiaOrden) + 1;
            }
            else
            {
                model.JerarquiaOrden = 1;
                ordenInicial = 0;
            }
            model.Estado = true;
            titulo = "NUEVO JERAQUIA APROBACIÓN";
        }



        //Areas de ttrabajo
        response = await Http.GetFromJsonAsync<Response>($"api/areastrabajo/{singleton.EmpresaId}/{AreaTrabajoId}");
        if (response.IsSuccessful)
        {
            List<DocumentoTipo> lstDtoTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
            areaTrabajoNombre = lstDtoTipo.FirstOrDefault().Nombre;
        }


        //Cargos
        response = await Http.GetFromJsonAsync<Response>($"api/cargos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listCargos = JsonConvert.DeserializeObject<List<Cargo>>(response.Data.ToString());
            listCargos = listCargos.Where(x => x.Estado == true).ToList();

            foreach (AreaTrabajoAprobacionJerarquia item in lstDtosAprob)
            {
                listCargos.RemoveAll(x => x.Id == item.CargoId && x.Id != model.CargoId);
            }
        }

    }



    protected async Task RegistrarAuditoria(AreaTrabajoAprobacionJerarquia model, string accion)
    {
        string accionDescipcion = "";

        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }


        if (model.Estado)
        {
            model.EstadoDescripcion = "ACTIVO";
        }
        else
        {
            model.EstadoDescripcion = "INACTIVO";
        }

        Auditoria auditoria = new Auditoria();
        auditoria.EmpresaId = singleton.EmpresaId;
        auditoria.Accion = accion;
        auditoria.Tabla = "AreasTrabajoAprobacionJerarquia";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;

        string cargo = listCargos.Where(x => x.Id == model.CargoId).FirstOrDefault().Nombre;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion + " el siguiente Área de Trabajo Aprobacion Jerarquia:----" + "AreaTrabajo: " + areaTrabajoNombre + "----Id: " + model.Id + "----JeraquiaOrden:" + model.JerarquiaOrden + "----Cargo: " + cargo + "----Estado:" + model.EstadoDescripcion;

        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }

}
