@page "/formareastrabajo"
@page "/formareastrabajo/{Id:int}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js


<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}



<EditForm Model="@model" OnValidSubmit="Save">


    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatTextField @bind-Value="@model.Codigo" Label="Código" Style="width:30%" Required="true"></MatTextField>
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.Nombre" Label="Nombre" Style="width:100%" Required="true"></MatStringField>
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatSelect Label="Estado" @bind-Value=@model.Estado Required="true">
                <MatOption Value=true>ACTIVO</MatOption>
                <MatOption Value=false>INACTIVO</MatOption>
            </MatSelect>
        </div>
    </div>
    <hr />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        @if (visibleGuardar)
        {
            <br />
            <div class="col-md-2">
                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            </div>
        }

    </div>
</EditForm>
<br />
@code {

    [Parameter]
    public int Id { get; set; }
    string titulo = "";
    string msgError = null;
    public AreaTrabajo model = new AreaTrabajo();
    Response response = new Response();
    bool visibleGuardar = true;
    public int codigoInicial = 0;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task Save()
    {
        string accion = "";
        visibleGuardar = false;
        msgError = null;
        model.EmpresaId = singleton.EmpresaId;
        model.Nombre = model.Nombre.ToUpper();

        if (model.Codigo <= 0)
        {
            msgError = "El código debe ser mayor a cero.";
        }

        if (codigoInicial != model.Codigo && msgError == null)
        {

            Validacion val = new Validacion();
            val.Mensaje = "ok";
            response = await Http.GetFromJsonAsync<Response>($"api/AreasTrabajo/AreasTrabajoValidarCodigo/{singleton.EmpresaId}/{model.Codigo}");
            if (response.IsSuccessful)
            {
                val = JsonConvert.DeserializeObject<Validacion>(response.Data.ToString());
            }

            if (val.Mensaje.ToLower() != "ok")
            {
                msgError = val.Mensaje;
            }

        }

        if (msgError == null)
        {

            if (Id != 0)
            {
                accion = "Editar";
                var result = await Http.PostAsJsonAsync<AreaTrabajo>($"api/areastrabajo/Edit", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }
            else
            {
                accion = "Ingresar";
                var result = await Http.PostAsJsonAsync<AreaTrabajo>($"api/areastrabajo", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }


            if (response.IsSuccessful)
            {
                await RegistrarAuditoria(model, accion);
                navigationManager.NavigateTo("/indexareastrabajo");
            }
            else
            {
                msgError = response.Message;
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }
        visibleGuardar = true;
    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexareastrabajo");
    }


    protected async Task LoadData()
    {

        model = new AreaTrabajo();
        if (Id > 0)
        {
            titulo = "EDITAR ÁREA DE TRABAJO";
            response = await Http.GetFromJsonAsync<Response>($"api/areastrabajo/{singleton.EmpresaId}/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<AreaTrabajo>>(response.Data.ToString()).FirstOrDefault();
                codigoInicial = model.Codigo;
            }
        }
        else
        {
            response = await Http.GetFromJsonAsync<Response>($"api/areastrabajo/{singleton.EmpresaId}/-1");
            if (response.IsSuccessful)
            {
                //List<DocumentoTipo> lstDtosTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
                //if (lstDtosTipo.Count() > 0)
                //{
                //    model.Codigo = lstDtosTipo.Max(x => x.Codigo) + 1;
                //}
                //else
                //{
                //    model.Codigo = 1;
                //}
            }
            model.Estado = true;
            titulo = "NUEVA ÁREA DE TRABAJO";
        }
    }


    protected async Task RegistrarAuditoria(AreaTrabajo model, string accion)
    {
        string accionDescipcion = "";

        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }


        if (model.Estado)
        {
            model.EstadoDescripcion = "ACTIVO";
        }
        else
        {
            model.EstadoDescripcion = "INACTIVO";
        }

        Auditoria auditoria = new Auditoria();
        auditoria.EmpresaId = singleton.EmpresaId;
        auditoria.Accion = accion;
        auditoria.Tabla = "AreasTrabajo";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion + " la siguiente Área de trabajo:----" + "Id: " + model.Id + "----Código:" + model.Codigo + "----Nombre: " + model.Nombre  + "----Estado:" + model.EstadoDescripcion;

        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }

}
