@page "/deleteaprobacionjeraquia"
@page "/deleteaprobacionjeraquia/{AreaTrabajoId:int}/{Id}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject IJSRuntime js
@inject ServicioSingleton singleton

<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>ELIMINAR JERAQUIA DE APROBACIÓN</b></h5>
    </div>

    <div class="col-md-5">
        <h5> <b>ÁREA DE TRABAJO:@areaTrabajoNombre </b></h5>
    </div>
</div>

<div class="row alert bg-warning">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <MatThemeProvider>
            <MatIcon Icon="warning"> </MatIcon> Esta  seguro de eliminar la jeraquia de aprobación?
        </MatThemeProvider>
    </div>
</div>


@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}


<EditForm Model="@model" OnValidSubmit="DeleteItem">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatTextField @bind-Value="@model.JerarquiaOrden" Label="Orden Jeraquia" Style="width:100%" Disabled="true"></MatTextField>
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.CargoNombre" Label="Cargo" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.EstadoDescripcion" Label="Estado" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <hr />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme1">
                <MatButton Raised="true" Icon="check_circle" Type="submit">Aceptar</MatButton>
            </MatThemeProvider>
        </div>
    </div>
</EditForm>
<br />
@code {

    [Parameter] public int Id { get; set; }
    [Parameter] public int AreaTrabajoId { get; set; }

    string titulo = "";
    string areaTrabajoNombre = "";


    public AreaTrabajoAprobacionJerarquia model = new AreaTrabajoAprobacionJerarquia();
    Response response = new Response();
    string msgError = null;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };




    protected override async Task OnInitializedAsync()
    {
        var qs = navigationManager.ToAbsoluteUri(navigationManager.Uri).Query;
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(qs);

        if (query.TryGetValue("AreaTrabajoId", out var item))
        {
            if (Int32.TryParse(item, out var id))
            {
                this.AreaTrabajoId = id;
            }
        }

        if (query.TryGetValue("Id", out var id_str))
        {
            if (Int32.TryParse(id_str, out var id))
            {
                this.Id = id;
            }
        }


        await LoadData();
    }

    protected async Task DeleteItem()
    {

        var result = await Http.DeleteAsync($"api/AreasTrabajoAprobacionJerarquia/{Id}");
        response = result.Content.ReadFromJsonAsync<Response>().Result;


        if (response.IsSuccessful)
        {
            await RegistrarAuditoria(model, "eliminar");
            navigationManager.NavigateTo("/indexaprobacionjeraquia/" + AreaTrabajoId);
        }
        else
        {
            msgError = response.Message;
        }

    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexaprobacionjeraquia/" + AreaTrabajoId);
    }


    protected async Task LoadData()
    {
        if (Id > 0)
        {

            response = await Http.GetFromJsonAsync<Response>($"api/AreasTrabajoAprobacionJerarquia/{singleton.EmpresaId}/{Id}/{AreaTrabajoId}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<AreaTrabajoAprobacionJerarquia>>(response.Data.ToString()).FirstOrDefault();
                areaTrabajoNombre = model.AreaTrabajoNombre;
            }
        }
    }

    protected async Task RegistrarAuditoria(AreaTrabajoAprobacionJerarquia model, string accion)
    {
        string accionDescipcion = "";

        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }



        if (model.Estado)
        {
            model.EstadoDescripcion = "ACTIVO";
        }
        else
        {
            model.EstadoDescripcion = "INACTIVO";
        }

        Auditoria auditoria = new Auditoria();
        auditoria.EmpresaId = singleton.EmpresaId;
        auditoria.Accion = accion;
        auditoria.Tabla = "AreasTrabajoAprobacionJerarquia";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion + " el siguiente Area de Trabajo Aprobacion Jerarquia:----" + "AreaTrabajo: " + areaTrabajoNombre +"----Id: " + model.Id + "----JeraquiaOrden:" + model.JerarquiaOrden + "----Cargo: " + model.CargoNombre +  "----Estado:" + model.EstadoDescripcion;
        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }
}
