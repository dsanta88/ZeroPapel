@page "/deleteroles/{Id:int}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject IJSRuntime js
@inject ServicioSingleton singleton

<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>ELIMINAR ROL</b></h5>
    </div>
</div>


<div class="row alert bg-warning">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <MatThemeProvider>
            <MatIcon Icon="warning"> </MatIcon> Esta  seguro de eliminar el rol?
        </MatThemeProvider>
    </div>
</div>


@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}


<EditForm Model="@model" OnValidSubmit="DeleteItem">

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatTextField @bind-Value="@model.Codigo" Label="Código" Style="width:100%" Disabled="true"></MatTextField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.Nombre" Label="Nombre" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.ApruebaDocumentoDescripcion" Label="Aprueba Documento" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.ValorMinimoStr" Label="Valor Mínimo" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.ValorMaximoStr" Label="Valor Máximo" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.EstadoDescripcion" Label="Estado" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme1">
                <MatButton Raised="true" Icon="check_circle" Type="submit">Aceptar</MatButton>
            </MatThemeProvider>
        </div>
    </div>
</EditForm>
<br />
@code {

    [Parameter]
    public int Id { get; set; }

    public Rol model = new Rol();
    Response response = new Response();
    string msgError = null;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task DeleteItem()
    {

        var result = await Http.DeleteAsync($"api/roles/{Id}");
        response = result.Content.ReadFromJsonAsync<Response>().Result;


        if (response.IsSuccessful)
        {
            await RegistrarAuditoria(model, "Eliminar");
            navigationManager.NavigateTo("/indexroles");
        }
        else
        {
            msgError = response.Message;
        }

    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexroles");
    }


    protected async Task LoadData()
    {
        if (Id > 0)
        {
            response = await Http.GetFromJsonAsync<Response>($"api/roles/{singleton.EmpresaId}/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<Rol>>(response.Data.ToString()).FirstOrDefault();
            }

        }
    }

    protected async Task RegistrarAuditoria(Rol model, string accion)
    {
        string accionDescipcion = "";


        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }

        if (model.ApruebaDocumento)
        {
            model.ApruebaDocumentoDescripcion = "SI";
        }
        else
        {
            model.ApruebaDocumentoDescripcion = "NO";
        }

        if (model.Estado)
        {
            model.EstadoDescripcion = "ACTIVO";
        }
        else
        {
            model.EstadoDescripcion = "INACTIVO";
        }

        Auditoria auditoria = new Auditoria();
        auditoria.EmpresaId = singleton.EmpresaId;
        auditoria.Accion = accion;
        auditoria.Tabla = "Roles";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion + " el siguiente Rol:----" + "Id: " + model.Id + "----Código:" + model.Codigo + "----Nombre: " + model.Nombre + "----ApruebaDocumento:" + model.ApruebaDocumentoDescripcion + "----ValorMínimo:" + model.ValorMinimo + "----ValorMáximo:" + model.ValorMaximo + "----Estado:" + model.EstadoDescripcion;
        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }
}
