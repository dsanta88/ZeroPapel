@page "/formAusentismossolicitudes"
@page "/formAusentismossolicitudes/{Id:int}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js
@using System.Globalization;

<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-10">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}

<div class="row alert bg-warning">
    <div class="row col-md-1">

    </div>
    <div class="col-md-11">
        <MatThemeProvider>
            <MatIcon Icon="info"> </MatIcon> <b>Importante:</b> @msgNota
        </MatThemeProvider>
    </div>
</div>


@if (!guardado)
{
    <EditForm Model="@model" OnValidSubmit="Save">

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <p><b>Fecha Inicio</b></p>
                <RadzenDatePicker Style="width:100%" ShowTime="true" @bind-Value="@model.FechaInicio" HourFormat="12" DateFormat="d MMMM yyyy h:mm tt" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <p><b>Fecha Fin</b></p>
                <RadzenDatePicker Style="width:100%" ShowTime="true" @bind-Value="@model.FechaFin" HourFormat="12" DateFormat="d MMMM yyyy h:mm tt" />
            </div>
        </div>

        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Tipo de ausentismo</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.AusentismoTipoId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listAusentismosTipos"
                                TextProperty="Nombre"
                                ValueProperty="Id"
                                Style="width:100%" />


            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <input class="bg-light" type="file" @ref="@inputElement" accept=".pdf">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="cloud_upload" Text="Cargar Archivo" Size="ButtonSize.Medium">
                </RadzenButton>

            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-10">
                <MatTextField @bind-Value="@model.Descripcion" TextArea="true" Label="Descripción" Required="true" Style="width:100%"></MatTextField>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-2">
                <MatThemeProvider Theme="@theme3">
                    <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
                </MatThemeProvider>
            </div>
            <br />
            <div class="col-md-2">
                @if (!visibleGuardar)
                {
                    <MatThemeProvider Theme="@theme1">
                        <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                    </MatThemeProvider>
                }

            </div>
        </div>
    </EditForm>
}

<br />
@code {

    [Parameter]
    public int Id { get; set; }
    string titulo = "";
    string msgError = null;
    string msgNota = null;
    bool guardado = false;
    bool visibleGuardar = true;
    ElementReference inputElement;

    List<AusentismoTipo> listAusentismosTipos = new List<AusentismoTipo>();
    public AusentismoSolicitud model = new AusentismoSolicitud();
    Response response = new Response();

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task Save()
    {
        visibleGuardar = false;
        msgError = null;
        model.UsuarioId = singleton.UsuarioId;
        model.JefeEstado = "P";
        model.ArchivoRuta = "";




        if (model.FechaInicio < Convert.ToDateTime(DateTime.Now))
        {
            msgError = "La fecha de inicio debe ser mayor o igual a la fecha actual.";
        }
        else if (model.FechaInicio >= model.FechaFin)
        {
            msgError = "La fecha de inicio debe ser menor a la fecha final.";
        }
        else if (model.AusentismoTipoId <= 0)
        {
            msgError = "Debe seleccionar el tipo de ausentismo.";
        }



        if (msgError == null)
        {
            var result = await Http.PostAsJsonAsync<AusentismoSolicitud>($"api/AusentismosSolicitudes/Guardar", model);
            response = result.Content.ReadFromJsonAsync<Response>().Result;

            if (response.IsSuccessful)
            {
                await EnviarEmail();
                guardado = true;
                navigationManager.NavigateTo("/indexausentismossolicitudes");
            }
            else
            {
                msgError = response.Message;
                await js.InvokeAsync<string>("MensajeAlerta", msgError);

            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }

        visibleGuardar = true;
    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexausentismossolicitudes");
    }


    protected async Task LoadData()
    {

        response = await Http.GetFromJsonAsync<Response>($"api/parametros/{Id}/AusentismoSolicitudNota");
        if (response.IsSuccessful)
        {
            Parametro parametro = new Parametro();
            parametro = JsonConvert.DeserializeObject<Parametro>(response.Data.ToString());
            msgNota = parametro.Valor;
        }

        //Ausentismos Tipos
        response = await Http.GetFromJsonAsync<Response>($"api/ausentismostipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listAusentismosTipos = JsonConvert.DeserializeObject<List<AusentismoTipo>>(response.Data.ToString());
            listAusentismosTipos = listAusentismosTipos.Where(x => x.Estado == true).ToList();
        }

        if (Id > 0)
        {
            titulo = "EDITAR CARGO";
            //response = await Http.GetFromJsonAsync<Response>($"api/ausentismostipos/{singleton.EmpresaId}/{Id}");
            //if (response.IsSuccessful)
            //{
            //    model = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString()).FirstOrDefault();
            //}
        }
        else
        {
            model.FechaInicio = DateTime.Now;
            model.FechaFin = DateTime.Now;
            titulo = "NUEVA SOLICITUD";
        }
    }


    protected async Task EnviarEmail()
    {
        bool state = true;
        string fechaInicio = model.FechaInicio.ToString("d MMMM yyyy h:mm tt", CultureInfo.CreateSpecificCulture("es-MX"));
        string fechaFin = model.FechaFin.ToString("d MMMM yyyy h:mm tt", CultureInfo.CreateSpecificCulture("es-MX"));


        Usuario jefe = new Usuario();
        response = await Http.GetFromJsonAsync<Response>($"api/usuarios/{singleton.EmpresaId}/{singleton.JefeUsuarioId}");
        if (response.IsSuccessful)
        {
            jefe = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString()).FirstOrDefault();
        }
        else
        {
            state = false;
        }

        AusentismoTipo auseTipo = new AusentismoTipo();
        response = await Http.GetFromJsonAsync<Response>($"api/ausentismostipos/{singleton.EmpresaId}/{model.AusentismoTipoId}");
        if (response.IsSuccessful)
        {
            auseTipo = JsonConvert.DeserializeObject<List<AusentismoTipo>>(response.Data.ToString()).FirstOrDefault();
        }
        else
        {
            state = false;
        }


        if (state)
        {
            string mensaje = string.Format(@"
             Hola <b>{0}, </b> tiene el siguiente <b>ausentismo</b> pendiente por revisar:
             <br>
             <br>
             <b>Empleado:</b> {1}
             <br>
             <b>Tipo:</b> {2}
             <br>
             <b>Fecha Inicio:</b> {3}
             <br
            <b>Fecha Fin:</b> {4}
             <br>
             <b>Descripción:</b> {5}
            
             <br>
             <br>
             ", jefe.NombreCompleto, singleton.UsuarioNombre,auseTipo.Nombre, fechaInicio, fechaFin, model.Descripcion);


            Email emailModel = new Email();
            emailModel.EmpresaId = singleton.EmpresaId;
            emailModel.UsuarioId = singleton.UsuarioId;
            emailModel.Mensaje = mensaje;
            emailModel.Asunto = "AUSENTISMO PENDIENTE";
            emailModel.Destinatarios = jefe.Email;
            await Http.PostAsJsonAsync<Email>($"api/Comunicaciones", emailModel);
        }


    }
}
