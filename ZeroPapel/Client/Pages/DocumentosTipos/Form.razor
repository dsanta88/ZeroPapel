@page "/formdocumentostipos"
@page "/formdocumentostipos/{AreaTrabajoId:int}/{Id}"
@using ZeroPapel.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js


<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
    <div class="col-md-5">
        <h5> <b>ÁREA DE TRABAJO:</b> @areTrabajoNombre</h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}



<EditForm Model="@model" OnValidSubmit="Save">


    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatStringField @bind-Value="@model.Nombre" Label="Nombre" Style="width:100%" Required="true"></MatStringField>
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <MatSelect Label="Estado" @bind-Value=@model.Estado Required="true">
                <MatOption Value=true>ACTIVO</MatOption>
                <MatOption Value=false>INACTIVO</MatOption>
            </MatSelect>
        </div>
    </div>
    <hr />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        @if (visibleGuardar)
        {
            <br />
            <div class="col-md-2">
                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            </div>
        }

    </div>
</EditForm>
<br />
@code {

    [Parameter] public int Id { get; set; }
    [Parameter] public int AreaTrabajoId { get; set; }


    string titulo = "";
    string areTrabajoNombre = "";
    string msgError = null;
    public DocumentoTipo model = new DocumentoTipo();
    Response response = new Response();
    bool visibleGuardar = true;
    public int codigoInicial = 0;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        var qs = navigationManager.ToAbsoluteUri(navigationManager.Uri).Query;
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(qs);

        if (query.TryGetValue("AreaTrabajoId", out var item))
        {
            if (Int32.TryParse(item, out var id))
            {
                this.AreaTrabajoId = id;
            }
        }

        if (query.TryGetValue("Id", out var id_str))
        {
            if (Int32.TryParse(id_str, out var id))
            {
                this.Id = id;
            }
        }

        await LoadData();
    }

    protected async Task Save()
    {
        visibleGuardar = false;
        msgError = null;
        model.EmpresaId = singleton.EmpresaId;
        model.AreaTrabajoId = AreaTrabajoId;
        model.Nombre = model.Nombre.ToUpper();



        if (msgError == null)
        {

            if (Id > 0)
            {

                var result = await Http.PostAsJsonAsync<DocumentoTipo>($"api/documentostipos/Edit", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }
            else
            {
                var result = await Http.PostAsJsonAsync<DocumentoTipo>($"api/documentostipos", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;
            }


            if (response.IsSuccessful)
            {
                navigationManager.NavigateTo("/indexdocumentostipos/" + AreaTrabajoId);
            }
            else
            {
                msgError = response.Message;
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }
        visibleGuardar = true;
    }

    protected async Task Cancelar()
    {
        navigationManager.NavigateTo("/indexdocumentostipos/"+AreaTrabajoId);
    }


    protected async Task LoadData()
    {

        model = new DocumentoTipo();

        if (AreaTrabajoId > 0)
        {
            response = await Http.GetFromJsonAsync<Response>($"api/areastrabajo/{singleton.EmpresaId}/{AreaTrabajoId}");
            if (response.IsSuccessful)
            {
                areTrabajoNombre = JsonConvert.DeserializeObject<List<AreaTrabajo>>(response.Data.ToString()).FirstOrDefault().Nombre;
            }
        }


        if (Id > 0)
        {
            titulo = "EDITAR TIPO DE DOCUMENTO";
            response = await Http.GetFromJsonAsync<Response>($"api/documentostipos/{singleton.EmpresaId}/{Id}/{AreaTrabajoId}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString()).FirstOrDefault();
            }
        }
        else
        {
            response = await Http.GetFromJsonAsync<Response>($"api/documentostipos/{singleton.EmpresaId}/-1/{AreaTrabajoId}");
            if (response.IsSuccessful)
            {
                List<DocumentoTipo> lstDtosTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
            }
            model.Estado = true;
            titulo = "NUEVO TIPO DE DOCUMENTO";
        }
    }


}
