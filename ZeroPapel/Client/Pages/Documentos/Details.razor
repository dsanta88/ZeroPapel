@page "/detailsdocumentos"
@page "/detailsdocumentos/{Id:int}"
@using ZeroPapel.Shared
@using System.IO
@using BlazorInputFile 
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js
@using System.Globalization;
@inject IFileReaderService fileReaderService;





<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>REVISAR DOCUMENTO</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-10">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}




@if (!guardado)
{
<EditForm Model="@model" OnValidSubmit="Save">




    <div class="row">
        <div class="col-md-3">
            <b>Centro de costo</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.CentroCostoId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listCentrosCosto"
                            TextProperty="Descripcion"
                            ValueProperty="Id"
                            Style="width:100%"
                            Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Tipo documento</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.DocumentoTipoId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listDocumentosTipo"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%"
                            Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Proveedor</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.ProveedorNit"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listProveedores"
                            TextProperty="RazonSocialSucursal"
                            ValueProperty="Nit"
                            Style="width:100%"
                            Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Nit</b>
            <MatStringField Style="width:100%" @bind-Value="@model.ProveedorNit" Disabled="true" />
        </div>
    </div>
    <br />

    <br />
    <div class="row">
        <div class="col-md-3">
            <b>Fecha de recepción</b>
            <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaRecepcion" HourFormat="12" DateFormat="d MMMM yyyy" Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Documento</b>
            <MatStringField @bind-Value="@model.DocumentoPrefijoNumero" Style="width:100%" Disabled="true"></MatStringField>
        </div>
        <div class="col-md-3">
            <b>Fecha de expedición</b>
            <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaExpedicion" HourFormat="12" DateFormat="d MMMM yyyy" Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Fecha de vencimiento</b>
            <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaVencimiento" HourFormat="12" DateFormat="d MMMM yyyy" Disabled="true" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-3">
            <b>Moneda</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.MonedaId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listMonedaTipo"
                            TextProperty="Moneda"
                            ValueProperty="Id"
                            Style="width:100%"
                            Disabled="true" />
        </div>
        <div class="col-md-3">
            <b>Valor</b>
            <MatTextField @bind-Value="@model.Valor" Style="width:100%" Disabled="true"></MatTextField>
        </div>
        <div class="col-md-3">
            <b>Responsable Actual</b>
            <MatStringField @bind-Value="@model.ResponsableActualCargo" Style="width:100%" Disabled="true"></MatStringField>
        </div>
        <div class="col-md-3">
            <b>Estado Actual</b>
            <MatStringField @bind-Value="@model.EstadoActual" Style="width:100%" Disabled="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-12">
            <b>Observación</b>
            <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%" Disabled="true"></MatTextField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-3">
            <b>Cambiar Estado</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.EstadoActualId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listDocumentosEstados"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
        @if (model.EstadoActualId == 2)
        {
        <div class="col-md-3">
            <b>Usuario Traslado</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.TrasladoUsuarioId"
                            Multiple="false" 
                            Placeholder="[SELECCIONAR]"
                            Data="@listUsuarios"
                            TextProperty="NombreCompleto"
                            ValueProperty="Id"
                            Style="width:100%"
                           />
        </div>
        }
    </div>
    <hr />

    <div class="row">
        <div class="col-md-6">
            @*<MatThemeProvider Theme="theme1">
                <MatButton Style="width:150px" Raised="true" Icon="visibility" @onclick="@(async () => await AbrirArchivo(model.ArchivoRuta))"> Abrir</MatButton>
            </MatThemeProvider>*@
            <embed src="@model.ArchivoRuta" style="width:100%;height:500px" controls />
            <br />
        </div>
        <div class="col-md-6">
            <div class="row alert bg-info">
                    <b>Seguimiento</b>
            </div>
            <br />
            @foreach (DocumentoSeguimiento item in listDtoSeguimiento)
            {
        <RadzenIcon Icon="check_circle" />  @(item.FechaRegistroStr + "--------" + item.UsuarioNombre) <label>@item.EstadoDescripcion</label> @(" el documento." )
                <br />
            }
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <br />
        @if (visibleGuardar)
        {
            <div class="col-md-2">

                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            </div>
        }

    </div>

</EditForm>
}

<br />
@code {

    [Parameter]
    public int Id { get; set; }
    string msgError = null;
    string msgNota = null;
    bool guardado = false;
    ElementReference inputElement;
    string status;
    bool visibleGuardar = true;

    List<CentroCosto> listCentrosCosto = new List<CentroCosto>();
    List<DocumentoTipo> listDocumentosTipo = new List<DocumentoTipo>();
    List<Proveedor> listProveedores = new List<Proveedor>();
    List<MonedaTipo> listMonedaTipo = new List<MonedaTipo>();
    List<DocumentoEstado> listDocumentosEstados = new List<DocumentoEstado>();
    List<DocumentoSeguimiento> listDtoSeguimiento = new List<DocumentoSeguimiento>();
    List<Usuario> listUsuarios = new List<Usuario>();


    public Documento model = new Documento();
    Response response = new Response();
    public bool stateUploadFile = false;
    public bool selectDocument = false;


    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };

    MatTheme theme2 = new MatTheme()
    {
        Primary = "blue",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }




    protected async Task LoadData()
    {

        //Centros Costo
        response = await Http.GetFromJsonAsync<Response>($"api/centroscosto");
        if (response.IsSuccessful)
        {
            listCentrosCosto = JsonConvert.DeserializeObject<List<CentroCosto>>(response.Data.ToString());
        }


        //Tipos de documento
        response = await Http.GetFromJsonAsync<Response>($"api/documentostipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listDocumentosTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
            listDocumentosTipo = listDocumentosTipo.Where(x => x.Estado == true).ToList();
        }


        ////Proveedores
        response = await Http.GetFromJsonAsync<Response>($"api/Proveedores");
        if (response.IsSuccessful)
        {
            listProveedores = JsonConvert.DeserializeObject<List<Proveedor>>(response.Data.ToString());
        }


        //Menedas
        response = await Http.GetFromJsonAsync<Response>($"api/monedatipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listMonedaTipo = JsonConvert.DeserializeObject<List<MonedaTipo>>(response.Data.ToString());
            listMonedaTipo.Where(x => x.Estado == true).ToList();
        }

        //Eastados de documento
        response = await Http.GetFromJsonAsync<Response>($"api/DocumentosEstados/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listDocumentosEstados = JsonConvert.DeserializeObject<List<DocumentoEstado>>(response.Data.ToString());
            listDocumentosEstados = listDocumentosEstados.Where(x => x.Estado == true).ToList();
        }

        ////Seguimiento Documentos
        response = await Http.GetFromJsonAsync<Response>($"api/DocumentosSeguimiento/{Id}");
        if (response.IsSuccessful)
        {
            listDtoSeguimiento = JsonConvert.DeserializeObject<List<DocumentoSeguimiento>>(response.Data.ToString());
        }



        response = await Http.GetFromJsonAsync<Response>($"api/usuarios/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listUsuarios = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString());
            listUsuarios.Where(x => x.Estado == true).ToList();
        }


        if (Id > 0)
        {
            response = await Http.GetFromJsonAsync<Response>($"api/documentos/{singleton.EmpresaId}/-1/{singleton.UsuarioId}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<Documento>>(response.Data.ToString()).FirstOrDefault();
            }
        }
    }


    public async Task AbrirArchivo(string url)
    {
        await js.InvokeAsync<object>("open", url, "_blank");
    }

    protected async Task Save()
    {

        visibleGuardar = false;
        msgError = null;

        if (msgError == null)
        {

            DocumentoSeguimiento seguimiento = new DocumentoSeguimiento();
            seguimiento.DocumentoId = Id;
            seguimiento.DocumentoEstadoId = model.EstadoActualId;
            seguimiento.JerarquiaOrden = model.JerarquiaOrden+1;
            seguimiento.Observacion = "";
            seguimiento.UsuarioRegistroId = singleton.UsuarioId;

            var result = await Http.PostAsJsonAsync<DocumentoSeguimiento>($"api/DocumentosSeguimiento", seguimiento);
            response = result.Content.ReadFromJsonAsync<Response>().Result;

            if (response.IsSuccessful)
            {
                await NotificarResponable(model,seguimiento);
                navigationManager.NavigateTo("/indexdocumentos");
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }
        visibleGuardar = true;
    }


    protected async Task NotificarResponable(Documento model, DocumentoSeguimiento seguimiento)
    {
        bool state = true;

        int cargoId = 0;
        response = await Http.GetFromJsonAsync<Response>($"api/DocumentosAprobacionJerarquia/{singleton.EmpresaId}/-1/{model.DocumentoTipoId}");
        if (response.IsSuccessful)
        {
            cargoId = JsonConvert.DeserializeObject<List<DocumentoAprobacionJerarquia>>(response.Data.ToString()).Where(x => x.JerarquiaOrden== seguimiento.JerarquiaOrden).FirstOrDefault().CargoId;
        }


        List<Usuario> listUsuarios = new List<Usuario>();
        response = await Http.GetFromJsonAsync<Response>($"api/usuarios/GetUsuariosXCargo/{cargoId}");
        if (response.IsSuccessful)
        {
            listUsuarios = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString()).ToList();
        }
        else
        {
            state = false;
        }

        if (state)
        {

            foreach (Usuario user in listUsuarios)
            {

                string mensaje = string.Format(@"
             Hola <b>{0}, </b> tiene el siguiente <b>Documento</b> pendiente por revisar:
             <br>
             <br>
             <b>TipoDocumento:</b> {1}
             <br>
             <b>Proveedor:</b> {2}
             <br>
             <b>Nit:</b> {3}
             <br>
             <b>Documento:</b> {4}
             <br>
             <b>Valor:</b> {5}
             <br>
             <b>FechaRecepción:</b> {6}
            <br>
             <b>FechaExpedición:</b> {7}
            <br>
             <b>FechaVencimiento:</b> {8}

             <br>
             <br>
             ", user.NombreCompleto, model.DocumentoTipoNombre, model.ProveedorNombre, model.ProveedorNit, model.DocumentoPrefijoNumero, model.Valor + " " + model.MonedaNombre, model.FechaRecepcionStr, model.FechaExpedicionStr, model.FechaVencimientoStr);


                Email emailModel = new Email();
                emailModel.EmpresaId = singleton.EmpresaId;
                emailModel.UsuarioId = singleton.UsuarioId;
                emailModel.Mensaje = mensaje;
                emailModel.Asunto = "DOCUMENTO PARA REVISAR: " + model.DocumentoPrefijoNumero;
                emailModel.Destinatarios = "santadavid88@gmail.com";//user.Email;
                await Http.PostAsJsonAsync<Email>($"api/Comunicaciones", emailModel);
            }
        }
    }

    public void Cancelar()
    {
        navigationManager.NavigateTo($"/indexdocumentos");
    }
}
