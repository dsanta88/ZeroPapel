@page "/detailsdocumentos"
@page "/detailsdocumentos/{Id:int}"
@using ZeroPapel.Shared
@using System.IO
@using BlazorInputFile 
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js
@using System.Globalization;
@inject IFileReaderService fileReaderService;





<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>DETALLE DOCUMENTO</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-10">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}




@if (!guardado)
{
    <EditForm Model="@model">

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Centro de costo</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.CentroCostoId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listCentrosCosto"
                                TextProperty="Descripcion"
                                ValueProperty="Id"
                                Style="width:100%"
                                Disabled="true"
                                />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Tipo documento</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.DocumentoTipoId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listDocumentosTipo"
                                TextProperty="Nombre"
                                ValueProperty="Id"
                                Style="width:100%" 
                                 Disabled="true"
                                />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Proveedores</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.ProveedorNit"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listProveedores"
                                TextProperty="RazonSocialSucursal"
                                ValueProperty="Nit"
                                Style="width:100%" 
                                 Disabled="true"
                                />
            </div>
            <div class="col-md-1"></div>

        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de recepción</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaRecepcion" HourFormat="12" DateFormat="d MMMM yyyy"  Disabled="true" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Documento</b>
                <MatStringField @bind-Value="@model.DocumentoPrefijoNumero" Style="width:100%"  Disabled="true"></MatStringField>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de expedición de documento</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaExpedicion" HourFormat="12" DateFormat="d MMMM yyyy"  Disabled="true" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de vencimiento del documento</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaVencimiento" HourFormat="12" DateFormat="d MMMM yyyy"  Disabled="true" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Moneda</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.MonedaId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listMonedaTipo"
                                TextProperty="Moneda"
                                ValueProperty="Id"
                                Style="width:100%" 
                                 Disabled="true"
                                />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Valor</b>
                <MatTextField @bind-Value="@model.Valor"  Style="width:100%"  Disabled="true"></MatTextField>
            </div>

        </div>
        <br />
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-10">
                <b>Observación</b>
                <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%"  Disabled="true"></MatTextField>
            </div>
        </div>
        <hr />

        <div class="row">
            <div class="col-md-12">
                <MatThemeProvider Theme="theme1">
                    <MatButton Style="width:150px" Raised="true" Icon="visibility" @onclick="@(async () => await AbrirArchivo(model.ArchivoRuta))"> Abrir</MatButton>
                </MatThemeProvider>
                <embed src="@model.ArchivoRuta" style="width:100%;height:600px" controls />
                <br />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="arrow_back" Text="Retornar" Size="ButtonSize.Medium" Click="@Retornar">
                </RadzenButton>
            </div>
        </div>
    </EditForm>
}

<br />
@code {

    [Parameter]
    public int Id { get; set; }
    string msgError = null;
    string msgNota = null;
    bool guardado = false;
    ElementReference inputElement;
    string status;

    List<CentroCosto> listCentrosCosto = new List<CentroCosto>();
    List<DocumentoTipo> listDocumentosTipo = new List<DocumentoTipo>();
    List<Proveedor> listProveedores = new List<Proveedor>();
    List<MonedaTipo> listMonedaTipo = new List<MonedaTipo>();
    public Documento model = new Documento();
    Response response = new Response();
    public bool stateUploadFile = false;
    public bool selectDocument = false;


    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };

    MatTheme theme2 = new MatTheme()
    {
        Primary = "blue",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }




    protected async Task LoadData()
    {

        //Centros Costo
        response = await Http.GetFromJsonAsync<Response>($"api/centroscosto");
        if (response.IsSuccessful)
        {
            listCentrosCosto = JsonConvert.DeserializeObject<List<CentroCosto>>(response.Data.ToString());
        }


        //Tipos de documento
        response = await Http.GetFromJsonAsync<Response>($"api/documentostipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listDocumentosTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
            listDocumentosTipo = listDocumentosTipo.Where(x => x.Estado == true).ToList();
        }


        ////Proveedores
        response = await Http.GetFromJsonAsync<Response>($"api/Proveedores");
        if (response.IsSuccessful)
        {
            listProveedores = JsonConvert.DeserializeObject<List<Proveedor>>(response.Data.ToString());
        }


        //Menedas
        response = await Http.GetFromJsonAsync<Response>($"api/monedatipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listMonedaTipo = JsonConvert.DeserializeObject<List<MonedaTipo>>(response.Data.ToString());
            listMonedaTipo.Where(x => x.Estado == true).ToList();
        }

        if (Id > 0)
        {
            response = await Http.GetFromJsonAsync<Response>($"api/documentos/{singleton.EmpresaId}/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<List<Documento>>(response.Data.ToString()).FirstOrDefault();
            }
        }
    }


    public async Task AbrirArchivo(string url)
    {
        await js.InvokeAsync<object>("open", url, "_blank");
    }


    public void Retornar()
    {
        navigationManager.NavigateTo($"/indexdocumentos");
    }
}
