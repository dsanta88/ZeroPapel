@page "/formdocumentos"
@page "/formdocumentos/{Id:int}"
@using ZeroPapel.Shared
@using System.IO
@using BlazorInputFile
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json;
@inject ServicioSingleton singleton
@inject IJSRuntime js
@using System.Globalization;
@inject IFileReaderService fileReaderService;





<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b> REGISTRAR DOCUMENTO</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-10">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}


@if (!guardado)
{
    <EditForm Model="@model" OnValidSubmit="Save">

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Centro de costo</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.CentroCostoId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listCentrosCosto"
                                TextProperty="Descripcion"
                                ValueProperty="Id"
                                Style="width:100%" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Tipo documento</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.DocumentoTipoId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listDocumentosTipo"
                                TextProperty="Nombre"
                                ValueProperty="Id"
                                Style="width:100%" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Proveedores</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.ProveedorNit"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listProveedores"
                                TextProperty="RazonSocialSucursal"
                                ValueProperty="Nit"
                                Style="width:100%" />
            </div>
            <div class="col-md-1"></div>

        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de recepción</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaRecepcion" HourFormat="12" DateFormat="d MMMM yyyy" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-5">
                <b>Prefijo documento</b>
                <MatStringField @bind-Value="@model.DocumentoPrefijo" Style="width:15%" Required="true"></MatStringField>
                <b>Número documento</b>
                <MatTextField @bind-Value="@model.DocumentoNumero" Style="width:15%" Required="true"></MatTextField>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de expedición de documento</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaExpedicion" HourFormat="12" DateFormat="d MMMM yyyy" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Fecha de vencimiento del documento</b>
                <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaVencimiento" HourFormat="12" DateFormat="d MMMM yyyy" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Moneda</b>
                <RadzenDropDown AllowClear="true"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                @bind-Value="model.MonedaId"
                                Multiple="false" Placeholder="[SELECCIONAR]"
                                Data="@listMonedaTipo"
                                TextProperty="Moneda"
                                ValueProperty="Id"
                                Style="width:100%" />
            </div>
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Valor</b>
                <MatTextField @bind-Value="@model.Valor" Required="true" Style="width:100%"></MatTextField>
            </div>

        </div>
        <br />

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-3">
                <b>Adjuntar docuement</b>
                <input class="bg-light" type="file" @ref="@inputElement" accept=".pdf">
            </div>

        </div>
        <br />
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-10">
                <b>Observación</b>
                <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%"></MatTextField>
            </div>
        </div>
        <hr />

        <div class="row">
            <div class="col-md-1"></div>
            <br />
            <div class="col-md-2">
                @if (visibleGuardar)
                {
                    <MatThemeProvider Theme="@theme1">
                        <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                    </MatThemeProvider>
                }

            </div>
        </div>
    </EditForm>
}

<br />
@code {

    [Parameter]
    public int Id { get; set; }
    string msgError = null;
    string msgNota = null;
    bool guardado = false;
    ElementReference inputElement;
    string status;

    List<CentroCosto> listCentrosCosto = new List<CentroCosto>();
    List<DocumentoTipo> listDocumentosTipo = new List<DocumentoTipo>();
    List<Proveedor> listProveedores = new List<Proveedor>();
    List<MonedaTipo> listMonedaTipo = new List<MonedaTipo>();
    public Documento model = new Documento();
    Response response = new Response();
    public bool stateUploadFile = false;
    public bool selectDocument = false;
    public bool visibleGuardar = true;
    string tipoDto;
    string centroCosto;
    string moneda;
    string proveedor;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task Save()
    {
        visibleGuardar = false;
        selectDocument = false;
        model.UsuarioRegistroId = singleton.UsuarioId;
        model.EmpresaId = singleton.EmpresaId;
        model.DocumentoPrefijo = model.DocumentoPrefijo.ToUpper();
        model.DocumentoPrefijoNumero = model.DocumentoPrefijo + "-" + model.DocumentoNumero.ToString("D8");

        model.FechaRecepcionStr = model.FechaRecepcion.ToString("d MMMM yyyy", CultureInfo.CreateSpecificCulture("es-MX"));
        model.FechaExpedicionStr = model.FechaExpedicion.ToString("d MMMM yyyy", CultureInfo.CreateSpecificCulture("es-MX"));
        model.FechaVencimientoStr = model.FechaVencimiento.ToString("d MMMM yyyy", CultureInfo.CreateSpecificCulture("es-MX"));

        tipoDto = listDocumentosTipo.Where(x => x.Id == model.DocumentoTipoId).FirstOrDefault().Nombre;
        centroCosto = listCentrosCosto.Where(x => x.Id == model.CentroCostoId).FirstOrDefault().Descripcion;
        moneda = listMonedaTipo.Where(x => x.Id == model.MonedaId).FirstOrDefault().Moneda;
        proveedor = listProveedores.Where(x => x.Nit == model.ProveedorNit).FirstOrDefault().RazonSocialSucursal;


        msgError = null;
        model.UsuarioRegistroId = singleton.UsuarioId;



        if (model.CentroCostoId == null)
        {
            msgError = "Debe seleccionar el centro de costos.";
        }
        else if (model.DocumentoTipoId <= 0)
        {
            msgError = "Debe ingresar el tipo de documento";
        }
        else if (model.ProveedorNit == null)
        {
            msgError = "Debe ingresar el proveedor.";
        }

        else if (model.FechaRecepcion <= Convert.ToDateTime("2020-01-01"))
        {
            msgError = "Fecha de recepción no valida.";
        }

        else if (model.DocumentoPrefijo == null || model.DocumentoPrefijo == "")
        {
            msgError = "Debe ingresar el prefijo del documento";
        }
        else if (model.DocumentoNumero <= 0)
        {
            msgError = "Debe ingresar el número de documento";
        }
        else if (model.FechaExpedicion <= Convert.ToDateTime("2020-01-01"))
        {
            msgError = "Fecha de expedición no valida.";
        }

        else if (model.FechaVencimiento <= Convert.ToDateTime("2020-01-01"))
        {
            msgError = "Fecha de vencimiento no valida.";
        }
        else if (model.MonedaId <= 0)
        {
            msgError = "Debe seleccionar la moneda.";
        }

        else if (model.Valor <= 0)
        {
            msgError = "El valor debe ser mayor a cero.";
        }


        if (msgError == null)
        {
            string formato = "pdf";
            string nombreFile = model.ProveedorNit + "-" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString() + "." + formato;

            await CargarArchivo(nombreFile, formato);
            if (!selectDocument)
            {
                msgError = "Debe seleccionar un archivo.";
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }

            if (stateUploadFile)
            {
                if (msgError == null)
                {
                    model.ArchivoRuta = "../Upload/Documentos/" + nombreFile;
                    var result = await Http.PostAsJsonAsync<Documento>($"api/documentos/guardar", model);
                    response = result.Content.ReadFromJsonAsync<Response>().Result;

                    if (response.IsSuccessful)
                    {
                        guardado = true;
                        await RegistrarAuditoria(model, "DOCUMENTO GENERADO");
                        await NotificarResponable(model);
                        navigationManager.NavigateTo("/indexdocumentos");
                    }
                    else
                    {
                        msgError = response.Message;
                        await js.InvokeAsync<string>("MensajeAlerta", msgError);
                    }
                }
                else
                {
                    await js.InvokeAsync<string>("MensajeAlerta", msgError);
                }
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }

        visibleGuardar = true;

    }


    protected async Task LoadData()
    {
        model.FechaRecepcion = DateTime.Now;

        //Centros Costo
        response = await Http.GetFromJsonAsync<Response>($"api/centroscosto");
        if (response.IsSuccessful)
        {
            listCentrosCosto = JsonConvert.DeserializeObject<List<CentroCosto>>(response.Data.ToString());
        }


        //Tipos de documento
        response = await Http.GetFromJsonAsync<Response>($"api/documentostipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listDocumentosTipo = JsonConvert.DeserializeObject<List<DocumentoTipo>>(response.Data.ToString());
            listDocumentosTipo = listDocumentosTipo.Where(x => x.Estado == true).ToList();
        }


        ////Proveedores
        response = await Http.GetFromJsonAsync<Response>($"api/Proveedores");
        if (response.IsSuccessful)
        {
            listProveedores = JsonConvert.DeserializeObject<List<Proveedor>>(response.Data.ToString());
        }


        //Menedas
        response = await Http.GetFromJsonAsync<Response>($"api/monedatipos/{singleton.EmpresaId}/-1");
        if (response.IsSuccessful)
        {
            listMonedaTipo = JsonConvert.DeserializeObject<List<MonedaTipo>>(response.Data.ToString());
            listMonedaTipo.Where(x => x.Estado == true).ToList();
        }
    }


    public async Task AbrirArchivo(string url)
    {
        await js.InvokeAsync<object>("open", url, "_blank");
    }

    public async Task CargarArchivo(string nombreArchivo, string formato)
    {

        try
        {
            foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
            {
                selectDocument = true;
                string ArchivoBase64;

                using (MemoryStream memorystream = await file.CreateMemoryStreamAsync(4 * 1024))
                {

                    byte[] bytesimage = new byte[memorystream.Length];
                    memorystream.Read(bytesimage, 0, (int)memorystream.Length);
                    ArchivoBase64 = Convert.ToBase64String(bytesimage);


                    Archivo archivo = new Archivo();
                    archivo.Base64 = ArchivoBase64;
                    archivo.Formato = formato;
                    archivo.Nombre = nombreArchivo;
                    archivo.EmpresaId = singleton.EmpresaId;

                    var result = await Http.PostAsJsonAsync<Archivo>("api/uploadfiles", archivo);
                    response = result.Content.ReadFromJsonAsync<Response>().Result;
                    if (response.IsSuccessful)
                    {
                        stateUploadFile = true;
                    }
                    else
                    {
                        msgError = response.Message;
                        await js.InvokeAsync<string>("MensajeAlerta", msgError);
                    }
                }
            }
        }

        catch (Exception ex)
        {
            stateUploadFile = false;
            msgError = ex.Message;
        }
    }

    protected async Task RegistrarAuditoria(Documento model, string accion)
    {

        Auditoria auditoria = new Auditoria();
        auditoria.EmpresaId = singleton.EmpresaId;
        auditoria.Accion = accion;
        auditoria.Tabla = "Documentos";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;


        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " genero el siguiente documento:----" + "CentroCosto: " + centroCosto + "----TipoDocumento:" + tipoDto + "----Proveedor: " + proveedor + "----Nit:" + model.ProveedorNit + "----FechaRecepcion:" + model.FechaRecepcionStr + "----Documento:" + model.DocumentoPrefijoNumero  + "----FechaExpedición:" + model.FechaExpedicionStr + "----FechaVencimiento:" + model.FechaVencimientoStr + "----Moneda:" + moneda + "----Valor:" + model.Valor.ToString();

        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }



    protected async Task NotificarResponable(Documento model)
    {
        bool state = true;

        int cargoId = 0;
        response = await Http.GetFromJsonAsync<Response>($"api/DocumentosAprobacionJerarquia/{singleton.EmpresaId}/-1/{model.DocumentoTipoId}");
        if (response.IsSuccessful)
        {
            cargoId = JsonConvert.DeserializeObject<List<DocumentoAprobacionJerarquia>>(response.Data.ToString()).OrderBy(x => x.JerarquiaOrden).First().CargoId;
        }


        List<Usuario> listUsuarios = new List<Usuario>();
        response = await Http.GetFromJsonAsync<Response>($"api/usuarios/GetUsuariosXCargo/{cargoId}");
        if (response.IsSuccessful)
        {
            listUsuarios = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString()).ToList();
        }
        else
        {
            state = false;
        }

        if (state)
        {

            foreach (Usuario user in listUsuarios)
            {

                string mensaje = string.Format(@"
             Hola <b>{0}, </b> tiene el siguiente <b>Documento</b> pendiente por revisar:
             <br>
             <br>
             <b>TipoDocumento:</b> {1}
             <br>
             <b>Proveedor:</b> {2}
             <br>
             <b>Nit:</b> {3}
             <br>
             <b>Documento:</b> {4}
             <br>
             <b>Valor:</b> {5}
             <br>
             <b>FechaRecepción:</b> {6}
            <br>
             <b>FechaExpedición:</b> {7}
            <br>
             <b>FechaVencimiento:</b> {8}

             <br>
             <br>
             ", user.NombreCompleto, tipoDto, proveedor, model.ProveedorNit, model.DocumentoPrefijoNumero, model.Valor + " " + moneda, model.FechaRecepcionStr, model.FechaExpedicionStr, model.FechaVencimientoStr);


                Email emailModel = new Email();
                emailModel.EmpresaId = singleton.EmpresaId;
                emailModel.UsuarioId = singleton.UsuarioId;
                emailModel.Mensaje = mensaje;
                emailModel.Asunto = "DOCUMENTO PARA REVISAR: " + model.DocumentoPrefijoNumero;
                emailModel.Destinatarios = user.Email;
                await Http.PostAsJsonAsync<Email>($"api/Comunicaciones", emailModel);
            }
        }
    }

}
